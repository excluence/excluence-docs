"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[193],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?a.createElement(f,i(i({ref:n},s),{},{components:t})):a.createElement(f,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[u]="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7323:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:5},i="Time, Aggregation and Window functions",c={unversionedId:"parcelQL/functions",id:"parcelQL/functions",title:"Time, Aggregation and Window functions",description:"These functions can be used normally within the ParcelQLColumn.",source:"@site/docs/parcelQL/functions.md",sourceDirName:"parcelQL",slug:"/parcelQL/functions",permalink:"/excluence-docs/docs/parcelQL/functions",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Filter",permalink:"/excluence-docs/docs/parcelQL/filter"}},l={},p=[{value:"Time function",id:"time-function",level:2},{value:"Aggregation Function",id:"aggregation-function",level:2},{value:"A.c1e4f4f4c4257510.TopShotMarketV3.MomentListed",id:"ac1e4f4f4c4257510topshotmarketv3momentlisted",level:3},{value:"Window Function",id:"window-function",level:2}],s={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"time-aggregation-and-window-functions"},"Time, Aggregation and Window functions"),(0,r.kt)("p",null,"These functions can be used normally within the ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/parcelQL/col-distinct-filter#complex-column-selection-and-manipulation"},"ParcelQLColumn"),"."),(0,r.kt)("p",null,"Non-window functions accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," and optional ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," properties, while window functions will requires extra ",(0,r.kt)("inlineCode",{parentName:"p"},"window")," attribute. ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," is an array of values and column. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"alias")," with functions."),(0,r.kt)("h2",{id:"time-function"},"Time function"),(0,r.kt)("p",null,"Currently, ParcelQL only supports these time functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ParcelQLDateTimeFunction = ['DATE_TRUNC', 'DATE_PART'];\n")),(0,r.kt)("p",null,"Let's create a query to fetch the day of ",(0,r.kt)("inlineCode",{parentName:"p"},"MomentMinted")," event."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Request Query")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "columns": [\n        {\n            "function": "DATE_TRUNC",\n            "parameters": [\n                "day",\n                {\n                    "column": "timestamp"\n                }\n            ]\n        }\n    ],\n    "filter": {\n        "column": "eventName",\n        "operator": "=",\n        "value": "MomentMinted"\n    },\n    "table": "flow_events"\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Generated SQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{\n  \"data\": \"select DATE_TRUNC('day',`timestamp`) from `flow_events` where (`eventName` = 'MomentMinted')\"\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "date_trunc": "2023-07-23T00:00:00.000Z"\n    },\n    {\n      "date_trunc": "2023-07-23T00:00:00.000Z"\n    },\n    ...\n  ]\n}\n')),(0,r.kt)("h2",{id:"aggregation-function"},"Aggregation Function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ParcelQLAggregationFunction = ['AVG','COUNT','SUM','MAX','MIN']\n")),(0,r.kt)("h3",{id:"ac1e4f4f4c4257510topshotmarketv3momentlisted"},"A.c1e4f4f4c4257510.TopShotMarketV3.MomentListed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n      "address": "0xc1e4f4f4c4257510",\n      "contractName": "TopShotMarketV3",\n      "contract": "A.c1e4f4f4c4257510.TopShotMarketV3",\n      "event": "A.c1e4f4f4c4257510.TopShotMarketV3.MomentListed",\n      "eventName": "MomentListed",\n      "timestamp": "2023-07-23T15:07:42.713Z",\n      "collectionId": "d49007d33a4d9e7bb7f62e8e5ee9a2a719bc810b19b9e80cfc48731115a74bf0",\n      "transactionId": "f9f0f6929117bfcabc287e0ba68313e6abd486325506d4f8c3af823619b531ad",\n      "eventIndex": "0",\n      "blockId": "18af3acc16b8640df83a521b515d9ed7fcd0b0f157580070a52c77dc6f5c40f1",\n      "blockHeight": "57302386",\n      "payload": {\n        "id": "37183622",\n        "price": "2.00000000",\n        "seller": "0x6a3ca11512bd711d"\n      }\n    }\n')),(0,r.kt)("p",null,"Let's calculate average listing price, total listings, max and min listing price  of TopShot Moments on date ",(0,r.kt)("inlineCode",{parentName:"p"},"2023-07-23"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Request Query")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "columns": [\n        {\n            "function": "AVG",\n            "parameters": [\n                {\n                    "column": ["payload", "price"],\n                    "type": "decimal"\n                }\n            ],\n            "alias": "avg_price"\n        },\n        {\n            "function": "MAX",\n            "parameters": [\n                {\n                    "column": ["payload", "price"],\n                    "type": "decimal"\n                }\n            ],\n            "alias": "max_price"\n        },\n        {\n            "function": "MIN",\n            "parameters": [\n                {\n                    "column": ["payload", "price"],\n                    "type": "decimal"\n                }\n            ],\n            "alias": "min_price"\n        },\n        {\n            "function": "COUNT",\n            "parameters": [\n                {\n                    "column": "*"\n                }\n            ],\n            "alias": "total_listings"\n        }\n    ],\n     "filter": {\n      "and": [\n        {\n        "column": "eventName",\n        "operator": "=",\n        "value": "MomentListed"\n    },\n    {\n      "column": {\n        "function": "DATE_TRUNC",\n        "parameters": ["day", {"column": "timestamp"}]\n      },\n      "operator": "=",\n      "value": "2023-07-23"\n    }\n        ]\n    },\n    "table": "flow_events"\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Generated SQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{\n  \"data\": \"select AVG((`payload`->>'price')::decimal) as `avg_price`, MAX((`payload`->>'price')::decimal) as `max_price`, MIN((`payload`->>'price')::decimal) as `min_price`, COUNT(*) as `total_listings` from `flow_events` where ((`eventName` = 'MomentListed') AND (DATE_TRUNC('day',`timestamp`) = '2023-07-23'))\"\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "avg_price": "19.6855524079320113",\n      "max_price": "1249.00000000",\n      "min_price": "1.00000000",\n      "total_listings": "353"\n    }\n  ]\n}\n')),(0,r.kt)("h2",{id:"window-function"},"Window Function"))}m.isMDXComponent=!0}}]);