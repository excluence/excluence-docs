"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[436],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(f,l(l({ref:n},s),{},{components:t})):r.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2214:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:4},l="Filter",i={unversionedId:"parcelQL/filter",id:"parcelQL/filter",title:"Filter",description:"Simple comparison filter",source:"@site/docs/parcelQL/filter.md",sourceDirName:"parcelQL",slug:"/parcelQL/filter",permalink:"/excluence-docs/docs/parcelQL/filter",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Column and Distinct",permalink:"/excluence-docs/docs/parcelQL/col-distinct-filter"},next:{title:"Time, Aggregation and Window functions",permalink:"/excluence-docs/docs/parcelQL/functions"}},c={},p=[{value:"Simple comparison filter",id:"simple-comparison-filter",level:2},{value:"1. Comparing a column to value",id:"1-comparing-a-column-to-value",level:3},{value:"2. Typecasting a column and comparing to a value",id:"2-typecasting-a-column-and-comparing-to-a-value",level:3}],s={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"filter"},"Filter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export type ParcelQLFilter =\n    | { and: ParcelQLFilter[] }\n    | { or: ParcelQLFilter[] }\n    | CompFilter\n")),(0,a.kt)("h2",{id:"simple-comparison-filter"},"Simple comparison filter"),(0,a.kt)("p",null,"Currently, ParcelQL supports following comparison operators"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type ComparisonOps = ['=', '>', '<', '>=','<=','<>','IN','NOT IN','LIKE','ILIKE']\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ComparisonFilterColumn\n    extends Partial<ParcelQLSimpleColumnWithCase> {\n    function?: ParcelQLAggregationFunction | ParcelQLColumnFunction;\n    parameters?: (unknown | ParcelQLSimpleColumnWithCase)[];\n}\n\ninterface _CompFilter {\n    column: string | string[] | ComparisonFilterColumn;\n    operator: ComparisonOps;\n    type?: string | string[];\n}\n\nexport type CompFilter = _CompFilter &\n    (\n        { value: unknown } \n        | { rightColumn: ComparisonFilterColumn }\n    );\n")),(0,a.kt)("h3",{id:"1-comparing-a-column-to-value"},"1. Comparing a column to value"),(0,a.kt)("p",null,"Let's create a simple query to select even with ",(0,a.kt)("inlineCode",{parentName:"p"},"eventName")," equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"Deposit"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    ...,\n    "filter": {\n        "column": "eventName",\n        "operator": "=",\n        "value": "Deposit"\n    }\n}\n')),(0,a.kt)("h3",{id:"2-typecasting-a-column-and-comparing-to-a-value"},"2. Typecasting a column and comparing to a value"),(0,a.kt)("p",null,"Query to select all ",(0,a.kt)("inlineCode",{parentName:"p"},"ListingCompleted")," event with ",(0,a.kt)("inlineCode",{parentName:"p"},"salePrice > 10")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    ...,\n    "filter": {\n        "column": ["payload", "salePrice"],\n        "type": "decimal",\n        "operator" : ">",\n        "value": 10\n    }\n}\n')))}m.isMDXComponent=!0}}]);