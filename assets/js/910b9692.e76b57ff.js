"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[246],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=l,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(f,r(r({ref:n},p),{},{components:t})):a.createElement(f,r({ref:n},p))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,r=new Array(o);r[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:l,r[1]=i;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7146:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(7462),l=(t(7294),t(3905));const o={sidebar_position:3},r="Column and Distinct",i={unversionedId:"parcelQL/col-distinct-filter",id:"parcelQL/col-distinct-filter",title:"Column and Distinct",description:"Simple column selection",source:"@site/docs/parcelQL/col-distinct-filter.md",sourceDirName:"parcelQL",slug:"/parcelQL/col-distinct-filter",permalink:"/excluence-docs/docs/parcelQL/col-distinct-filter",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"ParcelQL Query",permalink:"/excluence-docs/docs/parcelQL/query"},next:{title:"Filter",permalink:"/excluence-docs/docs/parcelQL/filter"}},s={},c=[{value:"Simple column selection",id:"simple-column-selection",level:2},{value:"1. Selecting single column",id:"1-selecting-single-column",level:3},{value:"2. Selecting multiple columns",id:"2-selecting-multiple-columns",level:3},{value:"3. Selecting all columns using *",id:"3-selecting-all-columns-using-",level:3},{value:"4. JSON data type selection",id:"4-json-data-type-selection",level:3},{value:"5. Typecasting values",id:"5-typecasting-values",level:3},{value:"Complex column selection and manipulation",id:"complex-column-selection-and-manipulation",level:2},{value:"1. Aliasing the column",id:"1-aliasing-the-column",level:3},{value:"2. Case clause",id:"2-case-clause",level:3},{value:"Distinct",id:"distinct",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,l.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"column-and-distinct"},"Column and Distinct"),(0,l.kt)("h2",{id:"simple-column-selection"},"Simple column selection"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export type ParcelQLSimpleColumn = {\n    column: string | string[];\n    type?: string | string[];\n};\n")),(0,l.kt)("p",null,"Examples from the ",(0,l.kt)("inlineCode",{parentName:"p"},"flow_events")," ",(0,l.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/intro#event-table"},"table"),"."),(0,l.kt)("h3",{id:"1-selecting-single-column"},"1. Selecting single column"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Request Query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "table": "flow_events",\n    "columns": [\n        {\n            "column": "address"\n        }\n    ]\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generated SQL")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": "select `address` from `flow_events`"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Response")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "address": "0xecfad18ba9582d4f"\n    },\n    {\n      "address": "0x0b2a3299cc857e29"\n    },\n    ...\n  ]\n}\n')),(0,l.kt)("h3",{id:"2-selecting-multiple-columns"},"2. Selecting multiple columns"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Request Query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "table": "flow_events",\n    "columns": [\n        {\n            "column": "address"\n        },\n        {\n            "column": "contract"\n        }\n    ]\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generated SQL")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": "select `address`, `contract` from `flow_events`"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Response")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "address": "0xecfad18ba9582d4f",\n      "contract": "A.ecfad18ba9582d4f.JoyrideMultiToken"\n    },\n    {\n      "address": "0x0b2a3299cc857e29",\n      "contract": "A.0b2a3299cc857e29.TopShot"\n    },\n    {\n      "address": "0x0b2a3299cc857e29",\n      "contract": "A.0b2a3299cc857e29.TopShot"\n    },\n    {\n      "address": "0x0b2a3299cc857e29",\n      "contract": "A.0b2a3299cc857e29.TopShot"\n    },\n    ...\n  ]\n}\n')),(0,l.kt)("h3",{id:"3-selecting-all-columns-using-"},"3. Selecting all columns using *"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Request Query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "table": "flow_events",\n    "columns": [\n        {\n            "column": "*"\n        }\n    ]\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generate SQL")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": "select * from `flow_events`"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Response")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "address": "0xecfad18ba9582d4f",\n      "contractName": "JoyrideMultiToken",\n      "contract": "A.ecfad18ba9582d4f.JoyrideMultiToken",\n      "event": "A.ecfad18ba9582d4f.JoyrideMultiToken.JoyrideMultiTokenInfoEvent",\n      "eventName": "JoyrideMultiTokenInfoEvent",\n      "timestamp": "2023-07-23T14:51:14.827Z",\n      "collectionId": "e8738554d413d79deb510342f45fa77b22210ed0470a715d17f33918ea386b97",\n      "transactionId": "969f6aa1cc41b4ed020f4a2a8cc8a7c5e2c5550408444f0a68857fb113664c6b",\n      "eventIndex": "4",\n      "blockId": "8e169acb8e21cb93209036af13a0f5bd94cf23e9937c61ebf397172c0c4e8611",\n      "blockHeight": "57301601",\n      "payload": {\n        "notes": "depositToken for userA.231cc0dbbcffc4b7.RLY.Vault"\n      }\n    },\n    {\n      "address": "0x0b2a3299cc857e29",\n      "contractName": "TopShot",\n      "contract": "A.0b2a3299cc857e29.TopShot",\n      "event": "A.0b2a3299cc857e29.TopShot.MomentMinted",\n      "eventName": "MomentMinted",\n      "timestamp": "2023-07-23T14:51:14.827Z",\n      "collectionId": "08bd5009d60ab9fed01e639dccc78fd79d445e0879c25f7f6293e0393955faf9",\n      "transactionId": "4f53d086e7c80eac323d32654b6250c1f272ffe9c1c30bfb5a74c372eb4bde99",\n      "eventIndex": "0",\n      "blockId": "8e169acb8e21cb93209036af13a0f5bd94cf23e9937c61ebf397172c0c4e8611",\n      "blockHeight": "57301601",\n      "payload": {\n        "setID": 90,\n        "playID": 4046,\n        "momentID": "43023669",\n        "serialNumber": 7301,\n        "subeditionID": 0\n      }\n    },\n    ...\n  ]\n}\n')),(0,l.kt)("p",null,"You can generate the same query by providing ",(0,l.kt)("inlineCode",{parentName:"p"},"columns")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,l.kt)("h3",{id:"4-json-data-type-selection"},"4. JSON data type selection"),(0,l.kt)("p",null,"The payload data from event is stored in ",(0,l.kt)("inlineCode",{parentName:"p"},"jsonb")," format. Let's have a look how we can use ParcelQL to select attribute from payload."),(0,l.kt)("p",null,"This is how ",(0,l.kt)("inlineCode",{parentName:"p"},"A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted")," is stored in the database."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n      "address": "0x4eb8a10cb9f87357",\n      "contractName": "NFTStorefrontV2",\n      "contract": "A.4eb8a10cb9f87357.NFTStorefrontV2",\n      "event": "A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted",\n      "eventName": "ListingCompleted",\n      "timestamp": "2023-07-23T14:36:36.814Z",\n      "collectionId": "bf6c7237e02528a51143c2543a68d9e337f6d7f2308055751ae3d8f6167153c6",\n      "transactionId": "2bcc3aa168c8e9f80cf0a3bee6e0efcfad59d57cd5a81ffa721de9827e3722b6",\n      "eventIndex": "8",\n      "blockId": "23dc7175fd1d5d52b3c349008d6df3e313653df24d0fa1ee74eb2d529b85aa53",\n      "blockHeight": "57300898",\n      "payload": {\n        "nftID": "2",\n        "expiry": "1733817600000",\n        "nftType": {\n          "kind": "Resource",\n          "type": "",\n          "fields": [\n            {\n              "id": "uuid",\n              "type": {\n                "kind": "UInt64"\n              }\n            },\n            {\n              "id": "id",\n              "type": {\n                "kind": "UInt64"\n              }\n            },\n            {\n              "id": "editionID",\n              "type": {\n                "kind": "UInt32"\n              }\n            },\n            {\n              "id": "serialNumber",\n              "type": {\n                "kind": "UInt64"\n              }\n            }\n          ],\n          "typeID": "A.eee6bdee2b2bdfc8.Basketballs.NFT",\n          "initializers": []\n        },\n        "nftUUID": "71226420",\n        "customID": "",\n        "purchased": true,\n        "salePrice": "10.00000000",\n        "commissionAmount": "0.00000000",\n        "listingResourceID": "1192177821",\n        "commissionReceiver": null,\n        "salePaymentVaultType": {\n          "kind": "Resource",\n          "type": "",\n          "fields": [\n            {\n              "id": "uuid",\n              "type": {\n                "kind": "UInt64"\n              }\n            },\n            {\n              "id": "balance",\n              "type": {\n                "kind": "UFix64"\n              }\n            }\n          ],\n          "typeID": "A.ead892083b3e2c6c.DapperUtilityCoin.Vault",\n          "initializers": []\n        },\n        "storefrontResourceID": "506239605"\n      }\n    }\n')),(0,l.kt)("p",null,"Let's create a query to select all ",(0,l.kt)("inlineCode",{parentName:"p"},"A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted")," and get their nft types. The ",(0,l.kt)("inlineCode",{parentName:"p"},"typeID")," attribute in ",(0,l.kt)("inlineCode",{parentName:"p"},"payload.nftType")," contains the resource address of NFT."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Request Query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "table": "flow_events",\n    "columns": [\n        {\n            "column": ["payload", "nftType", "typeID"]\n        }\n    ],\n    "filter": {\n        "column": "event",\n        "operator": "=",\n        "value": "A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted"\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generated SQL")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"{\n  \"data\": \"select (`payload`->'nftType'->>'typeID') from `flow_events` where (`event` = 'A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted')\"\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Response")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n        {\n            "?column?": "A.eee6bdee2b2bdfc8.Basketballs.NFT"\n        },\n        {\n            "?column?": "A.d0bcefdf1e67ea85.HWGarageCardV2.NFT"\n        },\n        {\n            "?column?": "A.d0bcefdf1e67ea85.HWGarageCardV2.NFT"\n        },\n        {\n            "?column?": "A.eee6bdee2b2bdfc8.Basketballs.NFT"\n        },\n        {\n            "?column?": "A.eee6bdee2b2bdfc8.Basketballs.NFT"\n        },\n        {\n            "?column?": "A.eee6bdee2b2bdfc8.Basketballs.NFT"\n        },\n        {\n            "?column?": "A.eee6bdee2b2bdfc8.Basketballs.NFT"\n        },\n        {\n            "?column?": "A.d0bcefdf1e67ea85.HWGarageCardV2.NFT"\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("p",null,"We can see the name ",(0,l.kt)("inlineCode",{parentName:"p"},"?column?"),". In the upcoming section, we will be taught how to assign custom names to columns using the ",(0,l.kt)("inlineCode",{parentName:"p"},"alias")," feature.\nFurthermore, in the later part of the tutorial, we'll explore the usage of ",(0,l.kt)("inlineCode",{parentName:"p"},"distinct")," to extract unique values and gain an understanding of the ",(0,l.kt)("inlineCode",{parentName:"p"},"filter")," functionality."),(0,l.kt)("h3",{id:"5-typecasting-values"},"5. Typecasting values"),(0,l.kt)("p",null,"Performing typecasting is a vital functionality that proves useful in the Excluence API, particularly when handling significant numeric values stored as strings. Presently, ParcelQL offers support for typecasting to the following data types:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"[\n    // Numbers\n    'integer',\n    'smallint',\n    'double precision',\n    'decimal',\n    'bigint',\n    // Text and string\n    'text',\n    // Boolean\n    'boolean',\n    // Date and time\n    'date',\n    // Json\n    'json',\n    'jsonb'\n]\n\n")),(0,l.kt)("p",null,"To understand typecasting in ParcelQL, let's take the ",(0,l.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/parcelQL/col-distinct-filter#4-json-data-type-selection"},"A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted")," event, in the payload ",(0,l.kt)("inlineCode",{parentName:"p"},"storefrontResourceID")," is an ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt64")," value and stored as string in the database. Now, let's explore how you can efficiently convert this string value into an integer."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Request Query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "table": "flow_events",\n    "columns": [\n        {\n            "column": ["payload", "listingResourceID"],\n            "alias": "listingResourceID"\n        },\n        {\n            "column": ["payload", "storefrontResourceID"],\n            "type": "integer"\n        }\n    ],\n    "filter": {\n        "column": "event",\n        "operator": "=",\n        "value": "A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted"\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generated SQL")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"{\n  \"data\": \"select (`payload`->>'listingResourceID') as `listingResourceID`, (`payload`->>'storefrontResourceID')::integer from `flow_events` where (`event` = 'A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted')\"\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Response")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "listingResourceID": "1192177821",\n      "int4": 506239605\n    },\n    {\n      "listingResourceID": "1144944279",\n      "int4": 995020166\n    },\n    {\n      "listingResourceID": "1144944945",\n      "int4": 995020166\n    },\n    {\n      "listingResourceID": "1192178848",\n      "int4": 506242189\n    },\n    {\n      "listingResourceID": "1192179885",\n      "int4": 506239605\n    },\n    ...\n  ]\n}\n')),(0,l.kt)("p",null,"Upon examination, it becomes evident that the ",(0,l.kt)("inlineCode",{parentName:"p"},"storefrontResourceID")," for the aforementioned event, with a corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"listingResourceID")," of ",(0,l.kt)("strong",{parentName:"p"},'"1192177821"')," has been successfully transformed from a string into an integer data type."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"type")," attribute in ",(0,l.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/parcelQL/col-distinct-filter#simple-column-selection"},"ParcelQLSimpleColumn")," is a string array. The developers can chain the typecasting for example for converting any value to ",(0,l.kt)("inlineCode",{parentName:"p"},"{any value type} -> text -> decimal")," the ",(0,l.kt)("inlineCode",{parentName:"p"},"type: ['text', 'decimal]")," and it will generate typecasting SQL ",(0,l.kt)("inlineCode",{parentName:"p"},"::text::decimal"),"."),(0,l.kt)("h2",{id:"complex-column-selection-and-manipulation"},"Complex column selection and manipulation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export type ParcelQLColumn = Partial<ParcelQLSimpleColumnWithCase> & {\n    alias?: string;\n} & (\n        | {\n              function: ParcelQLAggregationFunction | ParcelQLColumnFunction;\n              parameters?: (unknown | ParcelQLSimpleColumnWithCase)[];\n          }\n        | {\n              window: ParcelQLWindow;\n              function: ParcelQLWindowFunction;\n              parameters?: (unknown | ParcelQLSimpleColumnWithCase)[];\n          }\n        | {}\n    );\n")),(0,l.kt)("h3",{id:"1-aliasing-the-column"},"1. Aliasing the column"),(0,l.kt)("p",null,"Taking the above ",(0,l.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/parcelQL/col-distinct-filter#4-json-data-type-selection"},"example"),". The previous example returned ",(0,l.kt)("inlineCode",{parentName:"p"},"?column?")," due un-determinable column name, Let's have a look how we can alias any column."),(0,l.kt)("p",null,"For aliasing ",(0,l.kt)("inlineCode",{parentName:"p"},"ParcelQLColumn")," has ",(0,l.kt)("inlineCode",{parentName:"p"},"alias")," property. It generates an ",(0,l.kt)("inlineCode",{parentName:"p"},"as")," SQL statement."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "table": "flow_events",\n    "columns": [\n        {\n            "column": ["payload", "nftType", "typeID"],\n            "alias": "nftTypeID"\n        }\n    ],\n    "filter": {\n        "column": "event",\n        "operator": "=",\n        "value": "A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted"\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generated SQL")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"{\n  \"data\": \"select (`payload`->'nftType'->>'typeID') as `nftTypeID` from `flow_events` where (`event` = 'A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted')\"\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Response")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "nftTypeID": "A.eee6bdee2b2bdfc8.Basketballs.NFT"\n    },\n    {\n      "nftTypeID": "A.d0bcefdf1e67ea85.HWGarageCardV2.NFT"\n    },\n    {\n      "nftTypeID": "A.d0bcefdf1e67ea85.HWGarageCardV2.NFT"\n    },\n    {\n      "nftTypeID": "A.eee6bdee2b2bdfc8.Basketballs.NFT"\n    },\n    ...\n  ]\n}\n')),(0,l.kt)("h3",{id:"2-case-clause"},"2. Case clause"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ComparisonFilterColumn\n    extends Partial<ParcelQLSimpleColumnWithCase> {\n    function?: ParcelQLAggregationFunction | ParcelQLColumnFunction;\n    parameters?: (unknown | ParcelQLSimpleColumnWithCase)[];\n}\n\ninterface _CompFilter {\n    column: string | string[] | ComparisonFilterColumn;\n    operator: ComparisonOps;\n    type?: string | string[];\n}\n\nexport type CompFilter = _CompFilter &\n    ({ value: unknown } | { rightColumn: ComparisonFilterColumn });\nexport interface ParcelQLCase {\n    when: { and: CompFilter[] } | { or: CompFilter[] } | CompFilter;\n    then: unknown | ParcelQLSimpleColumn;\n}\n\nexport interface ParcelQLCaseWhen {\n    cases: ParcelQLCase[];\n    else: unknown | ParcelQLSimpleColumn;\n}\n\nexport interface ParcelQLSimpleColumnWithCase {\n    column: string | string[] | ParcelQLCaseWhen;\n    type?: string | string[];\n}\n")),(0,l.kt)("p",null,"The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ",(0,l.kt)("inlineCode",{parentName:"p"},"ELSE")," clause."),(0,l.kt)("p",null,"Let's illustrate its usage through an example. Consider a scenario where we aim to construct a query that returns three columns labeled high, medium, and low based on the salePrice of any ",(0,l.kt)("inlineCode",{parentName:"p"},"A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted")," event. The column values will be categorized as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"high"),": if the salePrice is greater than or equal to 8."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"medium"),": if the salePrice is lesser than 8 but greater than or equal to 4."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"low"),": if the salePrice is lesser than 4.")),(0,l.kt)("p",null,"This way, the query will effectively group the salePrice values into these three categories for further analysis."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Request Query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "table": "flow_events",\n    "columns": [\n        {\n            "column": ["payload", "listingResourceID"],\n            "alias": "listingResourceID"\n        },\n        {\n            "column": ["payload", "salePrice"],\n            "alias": "salePrice"\n        },\n        {\n            "column": {\n                "cases": [\n                    {\n                        "when": {\n                            "column": ["payload", "salePrice"],\n                            "type": "decimal",\n                            "operator": ">=",\n                            "value": 8\n                        },\n                        "then": "high"\n                    },\n                    {\n                        "when": {\n                            "and": [\n                                {\n                                    "column": ["payload", "salePrice"],\n                                    "type": "decimal",\n                                    "operator": "<",\n                                    "value": 8\n                                },\n                                {\n                                    "column": ["payload", "salePrice"],\n                                    "type": "decimal",\n                                    "operator": ">=",\n                                    "value": 4\n                                }\n                            ]\n                        },\n                        "then": "medium"\n                    }\n                ],\n                "else": "low"\n            },\n            "alias": "sentiment"\n        }\n    ],\n    "filter": {\n        "column": "event",\n        "operator": "=",\n        "value": "A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted"\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generated SQL")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"{\n  \"data\": \"select (`payload`->>'listingResourceID') as `listingResourceID`, (`payload`->>'salePrice') as `salePrice`, CASE WHEN (`payload`->>'salePrice')::decimal >= 8 THEN 'high' WHEN (`payload`->>'salePrice')::decimal < 8 AND (`payload`->>'salePrice')::decimal >= 4 THEN 'medium' ELSE 'low' END as `sentiment` from `flow_events` where (`event` = 'A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted')\"\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Response")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "listingResourceID": "1192177821",\n      "salePrice": "10.00000000",\n      "sentiment": "high"\n    },\n    {\n      "listingResourceID": "1144944279",\n      "salePrice": "2.99000000",\n      "sentiment": "low"\n    },\n    {\n      "listingResourceID": "1144944945",\n      "salePrice": "4.99000000",\n      "sentiment": "medium"\n    },\n    {\n      "listingResourceID": "1192178848",\n      "salePrice": "10.00000000",\n      "sentiment": "high"\n    },\n    ...\n  ]\n}\n')),(0,l.kt)("p",null,"In the upcoming Filter tutorial, we will delve into a comprehensive understanding of ",(0,l.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/parcelQL/filter#1-simple-comparison-filter"},"CompFilter"),"."),(0,l.kt)("h2",{id:"distinct"},"Distinct"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ParcelQLColumnWithoutWindow\n    extends Partial<ParcelQLSimpleColumnWithCase> {\n    alias?: string;\n    function?: ParcelQLAggregationFunction | ParcelQLColumnFunction;\n    parameters?: (unknown | ParcelQLSimpleColumnWithCase)[];\n}\n\nexport interface ParcelQLDistinct {\n    on?: ParcelQLSimpleColumn;\n    columns: ParcelQLColumnWithoutWindow[];\n}\n")),(0,l.kt)("p",null,"Let's use the above ",(0,l.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/parcelQL/col-distinct-filter#4-json-data-type-selection"},"example")," to understand how we can use ",(0,l.kt)("inlineCode",{parentName:"p"},"distinct")," clause to fetch unique ",(0,l.kt)("inlineCode",{parentName:"p"},"nftType"),", eliminating any duplicate entries. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Request Query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "action": "query",\n    "table": "flow_events",\n    "columns": [],\n    "distinct": {\n      "columns": [\n        {\n            "column": ["payload", "nftType", "typeID"]\n        }\n    ]\n    },\n    "filter": {\n        "column": "event",\n        "operator": "=",\n        "value": "A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted"\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generate SQL")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"{\n  \"data\": \"select DISTINCT (`payload`->'nftType'->>'typeID') from `flow_events` where (`event` = 'A.4eb8a10cb9f87357.NFTStorefrontV2.ListingCompleted')\"\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Response")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "?column?": "A.0b2a3299cc857e29.TopShot.NFT"\n    },\n    {\n      "?column?": "A.321d8fcde05f6e8c.Seussibles.NFT"\n    },\n    {\n      "?column?": "A.329feb3ab062d289.UFC_NFT.NFT"\n    },\n    {\n      "?column?": "A.807c3d470888cc48.Flunks.NFT"\n    },\n    {\n      "?column?": "A.87ca73a41bb50ad5.Golazos.NFT"\n    },\n    {\n      "?column?": "A.c6945445cdbefec9.TuneGONFT.NFT"\n    },\n    {\n      "?column?": "A.d0bcefdf1e67ea85.HWGarageCardV2.NFT"\n    },\n    {\n      "?column?": "A.e4cf4bdc1751c65d.PackNFT.NFT"\n    },\n    {\n      "?column?": "A.eee6bdee2b2bdfc8.Basketballs.NFT"\n    }\n  ]\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE"),": Currently, ParcelQL does not provide direct support for in-column distinct values, such as ",(0,l.kt)("inlineCode",{parentName:"p"},"COUNT(DISTINCT ...)")," statements."))}d.isMDXComponent=!0}}]);